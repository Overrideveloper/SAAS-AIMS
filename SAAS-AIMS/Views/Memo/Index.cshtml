@model IEnumerable<AIMS.Data.DataObjects.Entities.Memo.Memo>
@using AIMS.Data.Enums.Enums.NotificationType
@using AIMS.Data.Enums.Enums.UploadType
@using AIMS.Data.Enums.Enums.MemoType
@using System.ComponentModel;
@using Microsoft.AspNet.Identity
@using SAAS_AIMS.Models
@{
    ViewBag.Title = TempData["sess"] + "Memos";
    Layout = "~/Views/Shared/_MemoLayout.cshtml";
    TypeConverter converter = TypeDescriptor.GetConverter(typeof(MemoType));
    var id = User.Identity.GetUserId();
    AppUserDataContext _context = new AppUserDataContext();
    var user = _context.Users.Find(id);
    var role = user.Role;
}


<div class="right_col" role="main">
    <div class="">
        <div class="page-title">
            <div class="title_left">
                <h3>@TempData["sess"] Memos </h3>
            </div>
        </div>

        <div class="clearfix"></div>

        <div class="clearfix"></div>

        <div class="row">
            <div class="col-md-12 col-sm-12 col-xs-12">
                <div class="x_panel">
                    <div class="x_content table-responsive">

                        @if (TempData["Success"] != null)
                        {
                            if (TempData["NotificationType"] == NotificationType.Create.ToString())
                            {
                                <div class="alert alert-success alert-dismissible fadeIn fadeOut out fade in" role="alert">
                                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                    @TempData["Success"]
                                </div>
                            }
                            if (TempData["NotificationType"] == NotificationType.Edit.ToString())
                            {
                                <div class="alert alert-success alert-dismissible fadeIn fadeOut out fade in" role="alert">
                                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                    @TempData["Success"]
                                </div>
                            }
                            if (TempData["NotificationType"] == NotificationType.Delete.ToString())
                            {
                                <div class="alert alert-success alert-dismissible fadeIn fadeOut out fade in" role="alert">
                                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                    @TempData["Success"]
                                </div>
                            }
                        }

                        @if (role.CanManageMemos)
                        {
                            <div class="pull-right">
                                <a class="btn btn-info btn-sm" href="@Url.Action("Create", "Memo", new { sessionid = Convert.ToInt64(Session["sessionid"] )})"><i class="fa fa-plus"></i> Add Memo Entry</a><br />
                            </div>   
                        }
                       
                        <table id="datatable-buttons" class="grid table table-striped table-bordered">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Type</th>
                                    <th>Description</th>
                                    <th></th>
                                </tr>
                            </thead>


                            <tbody>
                                @foreach (var memo in Model)
                                {
                                    <tr>
                                        <td>@memo.Date.ToLongDateString()</td>
                                        <td>@converter.ConvertToString(memo.Type)</td>
                                        <td>@memo.Description</td>
                                        <td>
                                            @if (role.CanManageMemos)
                                            {
                                                <a class="btn btn-xs btn-default" href="@Url.Action("Edit", "Memo", new { id = memo.ID })"><i class="fa fa-pencil"></i> Edit</a>
                                                <a class="btn btn-xs btn-danger delete" href="@Url.Action("Delete", "Memo", new { id = memo.ID})"><i class="fa fa-remove"></i> Delete</a>   
                                            }
                                            @if (memo.FileUpload != null)
                                            {
                                                <a class="btn btn-xs btn-success" href="../../UploadedFiles/@UploadType.Memos.ToString()/@memo.FileUpload" target="_blank"><i class="fa fa-television"></i> View Memo</a>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript" src="~/Scripts/delete.js"></script>
}
